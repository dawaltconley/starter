$default-order:
  "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^" "_" "{" "|" "}" "~"
  "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
  "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" !default;

$default-unit-order: "px" "em" "rem" "%" !default;

@function _lt($a, $b, $order) {
  @if type-of($a) == "number" and type-of($b) == "number" {
    @return $a < $b;
  }

  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));

  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);

    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }

  @return str-length($a) < str-length($b);
}

@function sort($list, $order: $default-order) {
    $sep: list-separator($list);
    $less:  ();
    $equal: ();
    $large: ();

    @if length($list) > 1 {
        $seed: nth($list, ceil(length($list) / 2));

        @each $item in $list {
            @if $item == $seed {
                $equal: append($equal, $item, $sep);
            } @else if _lt($item, $seed, $order) {
                $less: append($less, $item, $sep);
            } @else if not _lt($item, $seed, $order) {
                $large: append($large, $item, $sep);
            }
        }

        @return join(join(sort($less, $order), $equal, $sep), sort($large, $order), $sep);
    }

    @return $list;
}

@function map-sort($map, $sort-by: "values", $order: $default-order) {
    $less:  ();
    $equal: ();
    $large: ();

    $values: index("values" "value" "val" "v", $sort-by);
    $keys: index("keys" "key" "k", $sort-by);
    @if not ($values or $keys) {
        @error "Wrong value for $sort-by argument: was #{$sort-by}, should be 'keys' or 'values'.";
    }

    @if length($map) > 1 {
        $seed: nth($map, ceil(length($map) / 2));
        @if $values {
            $seed: nth($seed, 2);
        } @else if $keys {
            $seed: nth($seed, 1);
        }

        @each $k, $v in $map {
            $item: null;
            @if $values { $item: $v; } @else { $item: $k; }

            @if $item == $seed {
                $equal: map-merge($equal, ($k:$v));
            } @else if _lt($item, $seed, $order) {
                $less: map-merge($less, ($k:$v));
            } @else if not _lt($item, $seed, $order) {
                $large: map-merge($large, ($k:$v));
            }
        }

        @return map-merge(map-merge(map-sort($less, $sort-by, $order), $equal), map-sort($large, $sort-by, $order));
    }

    @return $map;
}

@function sort-units($list, $order: $default-unit-order) {
    $sep: list-separator($list);
    $sorted: ();
    @each $unit in $order {
        $matches: ();
        @each $item in $list {
            @if unit($item) == $unit {
                $matches: append($matches, $item, $sep);
            }
        }
        @if length($matches) > 0 {
            $sorted: append($sorted, $matches, $sep);
        }
    }
    @return $sorted;
}

@function map-sort-units($map, $sort-by: "values", $order: $default-unit-order) {
    $sorted: ();

    $values: index("values" "value" "val" "v", $sort-by);
    $keys: index("keys" "key" "k", $sort-by);
    @if not ($values or $keys) {
        @error "Wrong value for $sort-by argument: was #{$sort-by}, should be 'keys' or 'values'.";
    }

    @each $unit in $order {
        $matches: ();
        @each $k, $v in $map {
            $item: null;
            @if $values { $item: $v; } @else { $item: $k; }
            @if unit($item) == $unit {
                $matches: map-merge($matches, ($k:$v));
            }
        }
        @if length($matches) > 0 {
            $sorted: append($sorted, $matches);
        }
    }

    @return $sorted;
}

@function reverse($list, $recursive: false) {
    $sep: list-separator($list);
    $reversedList: ();
    @for $i from length($list) through 1 {
        $item: nth($list, $i);
        @if type-of($item) == list and $recursive {
            $reversedList: append($reversedList, reverse($item, $recursive), $sep);
        } @else {
            $reversedList: append($reversedList, $item, $sep);
        }
    }
    @return $reversedList;
}

@function flatten($list, $recursive: false) {
    $sep: list-separator($list);
    $return: ();
    $max-l: 1;
    @each $sub-list in $list {
        $return: join($return, $sub-list, $sep);
        $max-l: max($max-l, length($sub-list));
    }
    @if $recursive and $max-l > 1 {
        @return flatten($return);
    } @else {
        @return $return;
    }
}

@function unique($list) {
    $sep: list-separator($list);
    $return: ();
    @each $item in $list {
        @if not(index($return, $item)) {
            $return: append($return, $item, $sep);
        }
    }
    @return $return;
}

@function file-suffix($file-name, $suffix, $extension: ".") {
    $return: ();
    $separator: list-separator($file-name);
    @each $name in $file-name {
        $ext-index: null;
        $i: 1;
        @while ($i <= length($extension)) and not($ext-index) {
            $ext: nth($extension, $i);
            @if str-slice($ext, 1, 1) != "." { $ext: ".#{$ext}"; }
            $ext-index: str-index(to-lower-case($name), to-lower-case($ext));
            $i: $i + 1;
        }
        @if $ext-index {
            $return: append($return, str-insert($name, $suffix, $ext-index), $separator);
        } @else {
            $return: append($return, $name, $separator);
        }
    }
    @return $return;
}

$sides: "top", "bottom", "left", "right";
$side: null;

@function get-orientation($side) {
    @if $side == "top" or $side == "bottom" {
        @return "vertical";
    } @else if $side == "left" or $side == "right" {
        @return "horizontal";
    } @else {
        @error "Not a valid side."
    }
}

@mixin all-sides {
    @each $name in $sides {
        $side: $name !global;
        $o: str-slice(get-orientation($side), 1, 1);
        &, &-#{$o}, &-#{str-slice($side, 1, 1)} {
            @content;
        }
    }
}
