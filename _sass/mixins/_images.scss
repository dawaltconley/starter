@mixin responsive-image ($image, $breakpoints: $device-dp, $densities: $device-dppx) {
    @if $breakpoints and length($breakpoints) > 0 {
        $file-types: jpg, jpeg, png, gif, svg, webp;

        // wrap image files in url if they are not yet
        @each $bg in $image {
            $i: index($image, $bg);
            $is-img: null;
            $n: 1;
            @while ($n <= length($file-types)) and not($is-img) {
                $ext: nth($file-types, $n);
                @if str-slice($ext, 1, 1) != "." { $ext: ".#{$ext}"; }
                $is-img: str-index(to-lower-case($bg), to-lower-case($ext));
                $n: $n + 1;
            }
            @if $is-img and (str-slice($bg, 1, 4) != "url(") {
                $bg: url(#{unquote($bg)});
                $image: set-nth($image, $i, $bg);
            }
        }

        // first
        $first: nth($breakpoints, 1);
        $x: map-get($first, x) + 1;
        $y: map-get($first, y) + 1;
        @media (min-width: #{$x}px), (min-height: #{$y}px) {
            background-image: $image;
        }

        // all the rest
        @for $i from 1 through length($breakpoints) {
            $current: nth($breakpoints, $i);
            $x: map-get($current, x);
            $y: map-get($current, y);
            $size-queries: ();
            $size-min: "(max-width: #{$x}px) and (max-height: #{$y}px)"; // Screen will not be bigger than image
            @if ($i < length($breakpoints)) { // Unless already the smallest image...
                $next: nth($breakpoints, $i + 1);
                $nx: map-get($next, x) + 1;
                $ny: map-get($next, y) + 1;
                $size-queries: ($size-min + " and (min-width: #{$nx}px)", $size-min + " and (min-height: #{$ny}px)"); // ...screen will not be smaller than next image
            } @else {
                $size-queries: ($size-min);
            }

            // loop through all possible screen resolutions
            @for $j from 1 through length($densities) {
                $d: nth($densities, $j);
                $webkit-res: ();
                $resolution: ();
                @if ($j > 1) { // Unless hightest resolution...
                    $webkit-res: append($webkit-res, "(-webkit-max-device-pixel-ratio: #{$d})"); // ...screen will not have a higher resolution than image
                    $resolution: append($resolution, "(max-resolution: #{$d * 96dpi})");
                }
                @if ($j < length($densities)) { // Unless lowest resolution...
                    $dn: nth($densities, $j + 1);
                    $webkit-res: append($webkit-res, "(-webkit-min-device-pixel-ratio: #{$dn + 0.01})"); // ...screen will not have a smaller resolution than the next lowest
                    $resolution: append($resolution, "(min-resolution: #{($dn * 96dpi) + 1dpi})");
                }

                $media-queries: ();
                @each $size-query in $size-queries { // All combinations of size and resolution queries
                    @each $res-query in ($webkit-res, $resolution) {
                        $media-queries: append($media-queries, "#{$size-query} and #{join-str($res-query, " and ")}", comma);
                    }
                }

                @media #{$media-queries} {
                    $suffix: "-#{$x}x#{$y}-#{$d}x"; // Suffix background image to match one produced by gulpfile
                    background-image: file-suffix($image, $suffix, $file-types);
                }
            }
        }
    } @else {
        background-image: $image;
    }
}

@mixin background-image($image: none, $x: center, $y: center, $size: cover, $repeat: no-repeat, $lighten: 0, $darken: 0, $blur: null, $responsive: false) {

    @if $blur {
        @extend .relative, .overflow-h;

        &::after {
            $blur-offset: -$blur * 2;
            content: "";
            position: absolute;
            top: $blur-offset; left: $blur-offset; right: $blur-offset; bottom: $blur-offset;
            @include blur($blur);
            @include background-image($image:$image, $x:$x, $y:$y, $lighten:$lighten, $darken:$darken, $responsive:$responsive);
            z-index: -1;
        }
    } @else if $image != none {
        @if $lighten > 0 {
            $image: (linear-gradient(rgba(white, $lighten), rgba(white, $lighten)), $image);
        } @else if $darken > 0 {
            $image: (linear-gradient(rgba(black, $darken), rgba(black, $darken)), $image);
        }
        @if $responsive {
            @include responsive-image($image);
        } @else {
            background-image: $image;
        }
    } @else {
        @if $lighten > 0 {
            @extend .relative;

            &::before {
                content: "";
                position: absolute;
                top: 0; left: 0; right: 0; bottom: 0;
                background-color: rgba(white, $lighten);
                z-index: 0;
            }
        } @else if $darken > 0 {
            @extend .relative;

            &::before {
                content: "";
                position: absolute;
                top: 0; left: 0; right: 0; bottom: 0;
                background-color: rgba(black, $darken);
                z-index: 0;
            }
        }
    }

    @if not($blur) {
        background-position: $x $y;
        background-size: $size;
        background-repeat: $repeat;
    }
}
