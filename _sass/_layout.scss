/*
 * Basic
 */

.relative {
    position: relative;
}

.absolute {
    position: absolute;
}

.fixed {
    position: fixed;
}

.float-left {
    float: left;
}

.float-right {
    float: right;
}

.v-rhythm > * {
    @extend %vertical-rhythm;

    &:last-child {
        margin-bottom: 0;
    }
}

.transparent {
    opacity: 0;
}

.content-box {
    box-sizing: content-box;
}

.clearfix:after {
    content: "";
    display: table;
    clear: both;
    border-spacing: 0;
}

/*
 * Sizes
 */

@each $name, $size in $sizes {
    $width: null;
    $height: null;

    @if length($size) == 1 {
        $width: $size;
        $height: $size;
    } @else if length($size) == 2 {
        $width: nth($size, 1);
        $height: nth($size, 2);
    } @else {
        @error "Wrong number of values in #{$name} size.";
    }

    .#{$name} {
        &-size, &-width {
            width: $width;
        }
        &-size, &-height {
            height: $height;
        }
        &-size-min, &-width-min {
            min-width: $width;
        }
        &-size-min, &-height-min {
            min-height: $height;
        }
        &-size-max, &-width-max {
            max-width: $width;
        }
        &-size-max, &-height-max {
            max-height: $height;
        }
    }
}

.max-width-none {
    max-width: none;
}

.max-height-none {
    max-height: none;
}

/*
 * Margins
 */

@each $name, $value in $spacings {
    .margin-#{$name} {
        @include all-sides {
            margin-#{$side}: $value;
        }
    }
}

/*
 * Paddings
 */

@each $name, $value in $spacings {
    @if $value != "auto" {
        .padding-#{$name} {
            @include all-sides {
                padding-#{$side}: $value;
            }
        }
    }
}

/*
 * Positioning
 */

@each $name, $value in $spacings {
    .pos-#{$name} {
        @include all-sides {
            #{$side}: $value;
        }
    }
}

.abs-center {
    @extend .absolute;
    top: 50%; left: 50%;
    @include transform(translate(-50%, -50%));
}

.abs-center-h {
    @extend .absolute;
    left: 50%;
    @include transform(translateX(-50%));
}

.abs-center-v {
    @extend .absolute;
    top: 50%;
    @include transform(translateY(-50%));
}

/*
 * Z-Axis
 */

@for $i from nth($z-range, 1) through nth($z-range, 2) {
    $class-name: z-#{$i};
    @if ($i < 0) {
        $class-name: z-neg-#{($i * -1)};
    }
    .#{$class-name} {
        @extend .relative;
        z-index: $i;
    }
}

.front {
    z-index: nth($z-range, 2) + 1;
}

.back {
    z-index: nth($z-range, 1) -1;
}

/*
 * Borders
 */

@each $name, $styles in $borders {
    .border-#{$name} {
        @include all-sides {
            border-#{$side}-width: map-get($styles, width);
            border-#{$side}-style: map-get($styles, style);
            border-#{$side}-color: map-get($styles, color) !important;
        }
    }
}

.border-between > * {
    border-top-width: 0;
    border-left-width: 0;
    border-right-width: 0;

    &:last-child {
        border-bottom-width: 0;
    }
}

.border-around > * {
    border-left-width: 0;
    border-right-width: 0;

    &:nth-child(n + 1) {
        border-top-width: 0;
    }
}
